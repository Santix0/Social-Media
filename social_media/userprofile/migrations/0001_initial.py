# Generated by Django 4.1.4 on 2023-01-11 14:02

import birthday.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, default='media/default_avatar/default.jpg', upload_to='media/avatars/photos')),
                ('birthday_of_user_dayofyear_internal', models.PositiveSmallIntegerField(default=None, editable=False, null=True)),
                ('birthday_of_user', birthday.fields.BirthdayField(blank=True, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('bio', models.CharField(blank=True, default='Nothing', max_length=500, verbose_name='bio')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Gay', 'Gay'), ('Lesbian', 'Lesbian'), ('Bisexual', 'Bisexual')], max_length=30, verbose_name='gender')),
                ('place_of_work', models.CharField(blank=True, default='Undefind', max_length=200, verbose_name='Work place')),
                ('place_of_study', models.CharField(blank=True, default='Undefind', max_length=200, verbose_name='Study place')),
                ('first_name', models.CharField(max_length=150, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last_name')),
                ('hobbies', models.CharField(blank=True, max_length=200, null=True, verbose_name='Hobbies')),
                ('relationship', models.CharField(blank=True, choices=[('Single', 'Single'), ('In love', 'In love'), ('In relationship', 'In relationship'), ('Married', 'Married'), ('Engaged', 'Engaged'), ('Actively searching', 'Actively searching')], max_length=50, null=True, verbose_name='Relationship')),
                ('political_view', models.CharField(blank=True, max_length=100, null=True, verbose_name='Political views')),
                ('religion', models.CharField(blank=True, max_length=100, null=True, verbose_name='Religion')),
                ('favorite_music', models.CharField(blank=True, max_length=100, null=True, verbose_name='Favorite music')),
                ('favorite_movies', models.CharField(blank=True, max_length=100, null=True, verbose_name='Favorite movies')),
                ('favorite_books', models.CharField(blank=True, max_length=100, null=True, verbose_name='Favorite books')),
                ('town_of_living', models.CharField(blank=True, max_length=150, null=True, verbose_name='Town of living')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('gender', 'username', 'first_name', 'last_name'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='media/photos')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('posted', models.DateTimeField(auto_now_add=True)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ('writer',),
            },
        ),
        migrations.CreateModel(
            name='FollowToUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Follow',
                'verbose_name_plural': 'Follows',
                'ordering': ('to_user', 'followed_user'),
            },
        ),
        migrations.CreateModel(
            name='CommentToUserPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=100, verbose_name='Comment')),
                ('posted', models.DateTimeField(auto_now_add=True)),
                ('commentator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('commented_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userprofile.userpost')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ('posted', 'commented_post', 'commentator'),
            },
        ),
    ]
